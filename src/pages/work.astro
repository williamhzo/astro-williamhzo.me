---
import BaseLayout from '@layouts/BaseLayout.astro';
import PageMeta from '@components/seo/PageMeta.astro';
import Article from '@components/Article.astro';
import Emoji from '@components/Emoji.astro';
---

<BaseLayout>
  <PageMeta title="Work" slot="meta" />

  <Fragment slot="main">
    <Article>
      <h1>Work</h1>

      <p>
        This is a showcase of some projects I've worked on. See something that
        you like? Feel free to <a href="/contact">get in touch</a>.
      </p>
    </Article>

    <Article class="project">
      <header class="repel">
        <h2>Deca</h2>

        <div class="meta">
          <p>Digital Art</p>
          <p>Frontend Engineer</p>
          <time datetime="2020">2023 — current</time>
        </div>
      </header>

      <hr />

      <p>
        Deca is a digital art platform, to discover and collect beautiful
        digital objects. It's a go-to link for artists and collectors to
        showcase their work and interact with the community.
      </p>

      <p>
        I joined them as a Frontend Engineer, working on the user-facing
        product. Tasks include implementing new full-stack features, prototyping
        and improving UX by conducting user-research interviews, migrating
        legacy code and building a custom internal UI library.
      </p>

      <hr />

      <h3>Stack</h3>

      <p>
        Full TypeScript codebase, with Next.js, tRPC, Prisma and TailwindCSS.
      </p>

      <h3>User Interface</h3>

      <p>
        Most base UI elements are based on <a href="https://www.radix-ui.com/"
          >Radix</a
        > headless primitives for accessibility and DX.
      </p>

      <p>Soon to be visually tested in a custom integrated Storybook.</p>

      <h3>Production site</h3>

      <p>
        <a
          href="https://deca.art"
          class="external-link"
          target="_blank"
          rel="noopener">deca.art</a
        >
      </p>

      <hr />
    </Article>

    <Article class="project">
      <header class="repel">
        <h2>Liveroom</h2>

        <div class="meta">
          <p>Hackhaton</p>
          <p>Frontend Engineer</p>
          <time datetime="2020">2023</time>
        </div>
      </header>

      <hr />

      <p>
        Liveroom is an idea that emerged during a 3-day hackhaton, hosted by the
        product agency <a href="https://mozza.io/">Mozza</a> in sunny Lisbon <Emoji
          emoji="☀️"
          label="sun"
        />. The goal was to build a product with a team composed of <a
          href="https://micka.design/">Micka</a
        > (Product Design) and <a href="https://basile.nouvellet.com/">Basile</a
        > (Full-stack Engineer).
      </p>

      <hr />

      <h3>Why Liveroom?</h3>

      <p>
        Product demos are boring, Liveroom lets you instantly join your customer
        in your product with live cursors, video calls and interactions. Think
        Figma's powerful real-time collaboration, but for any product. <a
          href="https://twitter.com/Liveroom_app">Follow along!</a
        >
      </p>

      <h3>Stack</h3>

      <p>Elixir's LiveView and TailwindCSS.</p>

      <h3>Production site</h3>

      <p>
        <a
          href="https://liveroom.app"
          class="external-link"
          target="_blank"
          rel="noopener">liveroom.app</a
        >
      </p>

      <hr />
    </Article>

    <Article class="project">
      <header class="repel">
        <h2>Mansa</h2>

        <div class="meta">
          <p>Fintech</p>
          <p>Lead Frontend Engineer</p>
          <time datetime="2020">2020 — 2022</time>
        </div>
      </header>

      <hr />

      <p>
        Mansa is a French lending company for small-to-medium businesses (SMEs)
        and independent workers.
      </p>

      <p>
        I joined them as the first Frontend employee, implementing from scratch
        the Frontend architecture, a shared custom Design-System, internal &
        user-facing products, hired and onboarded a team of 6 full-time Frontend
        Engineers.
      </p>

      <hr />

      <h3>Stack</h3>

      <p>
        Full TypeScript codebase, the Frontend stack evolved around React and
        Next.js, in a <a
          href="https://martinfowler.com/bliki/DomainDrivenDesign.html"
          >Domain Driven Design (DDD)</a
        > architecture across the stack.
      </p>

      <h3>User Interface</h3>

      <p>
        The Design System shared component library followed the <a
          href="https://atomicdesign.bradfrost.com/">Atomic Design</a
        > methodology with visual testing and playground in <a
          href="https://storybook.com/">Storybook</a
        >.
      </p>

      <p>
        Most documentation regarding the Design System was held in Figma, more
        specifically regarding UI components and design tokens.
      </p>

      <p>
        Most UI elements were based on <a href="https://www.radix-ui.com/"
          >Radix</a
        > headless primitives for accessibility and DX.
      </p>

      <h3>Data flow</h3>

      <p>
        <a href="https://tanstack.com/query/latest">TanStack Query</a> (previously
        named React-Query) was used for fetching API data and synchronizing it, handling
        cache invalidation/revalidation and mutations. Synchronous local state being
        mainly handled by React's <code>useState()</code> and <code
          >useContext()</code
        >.
      </p>

      <p>
        Form and payload validation was done with <a href="https://zod.dev/"
          >Zod</a
        >, to guarantee type-safety and runtime validation (TypeScript's static
        type-checking not being enough to guarantee data sanity and prevent
        bugs).
      </p>

      <h3>Testing</h3>

      <p>
        Working in Financial products requires confidence and a good amount of
        testing. Unit Tests were done using <a href="https://jestjs.io/">Jest</a
        > and <a href="https://testing-library.com/">Testing Library</a>.
      </p>

      <p>
        Integration and end-to-end tests were made using <a
          href="https://www.cypress.io/">Cypress</a
        >, which was a very convenient tool to mock backend APIs and focus on
        the Frontend flow, without having to spin the whole stack and
        containers.
      </p>

      <h3>Production site</h3>

      <p>
        <a
          href="https://getmansa.com"
          class="external-link"
          target="_blank"
          rel="noopener">getmansa.com</a
        >
      </p>

      <hr />
    </Article>
  </Fragment>
</BaseLayout>

<style>
  .project header {
    flex-direction: column;
    align-items: flex-start;
  }

  .meta {
    text-align: left;
    text-transform: uppercase;
  }

  @media (min-width: 50em) {
    .meta {
      text-align: right;
    }

    .project header {
      flex-direction: row;
    }
  }
</style>
